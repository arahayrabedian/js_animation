/**
 * Naive implementation of a globalAppState
 */

const AppState = {


  AnimationComplete: true,
  AnimationsQueue: [],

};

function getAnimationState() {
  return AppState.AnimationComplete;
}


function setAnimationState(elem) {
  //put an uniqe ID of animation element into an anumation status queue array once animation begins and set animation state to false.
  //use the uniq __domeID attribute for the element, generated by react
  //it asssumes that __reactInternalInstance$<someHash> will be the first element in the elem[0] object, if it doesnt work, check if that is the case.
  const id = elem[0][Object.keys(elem[0])[0]]._domID;
  //console.log(`AppSate: adding new id of ${id} to the array`);
  AppState.AnimationsQueue.push(id);
  AppState.AnimationComplete = false;
  //console.log(`AppSate: array with added ID is ${AppState.AnimationsQueue}, AnimationComplete = ${AppState.AnimationComplete}`);
}

function removeAnimationState(elem) {
  //remove an uniqe ID of animation element from the animation status queue once it finishes. If queue is empt,y set animation complete to true.
  //use the uniq __domeID attribute for the element, generated by react
  //it asssumes that __reactInternalInstance$<someHash> will be the first element in the elem[0] object, if it doesnt work, check if that is the case.
  const id = elem[0][Object.keys(elem[0])[0]]._domID;
  const arr =  AppState.AnimationsQueue;
  //console.log(`AppSate: adding new id of ${id} to the array, array before mod is ${arr}`);
  arr.splice(arr.indexOf(id), 1);
  if (arr.length === 0) AppState.AnimationComplete = true;
  //console.log(`AppSate: array with removed ID is ${AppState.AnimationsQueue}, AnimationComplete = ${AppState.AnimationComplete}`);
}

function forceAnimationState(val, id, elem) {
  //in some cases when there are conditional render elements, it might neceserry to force the state, with optional option to put into the state queue array.
  if (val === true) {
    //set true and empty the array
    AppState.AnimationComplete = true;
    AppState.AnimationsQueue = [];
    //console.log(`AppSate: array with forced true state is ${AppState.AnimationsQueue}, AnimationComplete = ${AppState.AnimationComplete}`);


    // this part of the function of setting value to false and updating with value havent been neither used or tested yet.
  } else if (val === false) {
    if (id === undefined || elem === undefined) {
        console.error(`Appstate: AppState.AnimationComplete is forced to false, but no value has been provided for the animoation state queue array, val is ${val}, id is ${id}, elem is ${elem}`);
    }   else  {
      //make one of
      const domId = id || elem[0][Object.keys(elem[0])[0]]._domID;
      AppState.AnimationsQueue.push(domId);
      AppState.AnimationComplete = false;
      //console.log(`AppSate: array with forced false state is ${AppState.AnimationsQueue}, AnimationComplete = ${AppState.AnimationComplete}`);
    }
  } else {
      console.error(`Appstate: some unexpexted conidtion has been triggered with forceAnimationState, val is ${val}, id is ${id}, elem is ${elem}`);
  }
}
export { getAnimationState, setAnimationState, removeAnimationState, forceAnimationState };
